#!/usr/bin/env python
import os
import sys
from os.path import join, getsize
try:
    from collections import OrderedDict
except:
    from ordereddict import OrderedDict
import argparse


size_results = OrderedDict()


def saveSizeResult(root, dirs, files):
    size_results[root] = 0
    for name in files:
        try:
            size_results[join(root, name)] = getsize(join(root, name))
            size_results[root] += size_results[join(root, name)]
        except:
            pass
    for d in dirs:
        try:
            size_results[root] += size_results[join(root, d)]
        except:
            pass
    return


def getAbsDepth(dir_name):
    current_abs_path = os.path.abspath(dir_name)
    return current_abs_path.count(os.path.sep)


# bottom-up traversal mode
def getDirSize(dir_name):
    for root, dirs, files in os.walk(dir_name, topdown=False):
        if root in size_results.keys():
            continue  # skip the calculated results
        saveSizeResult(root, dirs, files)
    return


def getAllDirSize(dir_name):
    init_abs_depth = getAbsDepth(dir_name)

    for root, dirs, files in os.walk(dir_name, topdown=True):
        current_abs_depth = getAbsDepth(root)
        relative_depth = current_abs_depth - init_abs_depth

        # identify the home folder where .snapshot situated
        if '.snapshot' in dirs and current_abs_depth == 2:
            dirs.remove('.snapshot')  # ignore the snapshots

        # only scan dir_name's directive children
        if relative_depth == 1:
            dirs[:] = []

        # /homes/user/dir[/..../...] and the root is dir_name's direct child
        if current_abs_depth > 2 and relative_depth == 1:
            print root
            getDirSize(root)

    # The size of '.'
    root, dirs, files = os.walk(dir_name, topdown=True).next()
    saveSizeResult(root, dirs, files)

    return size_results


def printLargeDirs(topNum):
    l = sorted(size_results.items(), key=lambda t: t[1])  # sort dict by values
    num = min(topNum, len(l))
    print '-----------------RESULTS-------------------'
    for i in range(num):
        print "%s : %f M" % (l[len(l) - i - 1][0],
                             l[len(l) - i - 1][1] / 1024.0 / 1024.0)
    print '-------------------------------------------'
    return


def parse_args(options):
    parser = argparse.ArgumentParser(description="Quota analysing tool")
    parser.add_argument(
        "-d", "--dirname", default=".",
        help="directory to be analysed")
    parser.add_argument(
        "-n", "--number", type=int, default=20,
        help="number of largest directories to print")
    return parser.parse_args()


def checkAbsPath(dir_name):
    abs_dir = os.path.abspath(dir_name)
    if 'homes' not in abs_dir and 'home' not in abs_dir:
        print 'Please ensure that you are analysing a personal directory'
        exit(-1)


if __name__ == '__main__':
    options = parse_args(sys.argv[1:])
    checkAbsPath(options.dirname)
    getAllDirSize(options.dirname)
    printLargeDirs(options.number)
