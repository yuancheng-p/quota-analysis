#!/usr/bin/env python
import os
import sys
from os.path import join, getsize
try:
    from collections import OrderedDict
except:
    from ordereddict import OrderedDict
import argparse


def getDirSize(dir_name):
    size = 0
    for root, dirs, files in os.walk(dir_name):
        try:
            size += sum([getsize(join(root, name)) for name in files])
        except:
            pass
    return size


def getAllDirSize(dir_name, depth):
    dirs_size = OrderedDict()
    for root, dirs, files in os.walk(dir_name, topdown=True):
        current_depth = root[len(dir_name) + len(os.path.sep):].count(os.path.sep)
        print root
        # ignore the snapshots
        if '.snapshot' in dirs:
            dirs.remove('.snapshot')
        if current_depth == depth:
            dirs[:] = []
        if root != '.':
            dirs_size[root] = getDirSize(root) / 1024.0 / 1024.0
    return dirs_size


def printLargeDirs(results, topNum):
    l = sorted(results.items(),key = lambda t:t[1]) # sort dict by values
    num = min(topNum, len(l))
    for i in range(num):
        print "%s : %f M"%(l[len(l) - i - 1][0], l[len(l) - i - 1][1])
    return


def parse_args(options):
    parser = argparse.ArgumentParser(description="Quota analysing tool")
    parser.add_argument(
        "-d", "--dirname", default = ".",
        help = "directory to be analysed")
    parser.add_argument(
        "-n", "--number", type = int, default = 20,
        help = "number of largest directories to print")
    parser.add_argument(
        "--depth", type = int, default = 1, help = "depth of directories")
    return parser.parse_args()


if __name__ == '__main__':
    options = parse_args(sys.argv[1:])
    dir_name = options.dirname
    results = getAllDirSize(options.dirname, options.depth)
    printLargeDirs(results, options.number)

